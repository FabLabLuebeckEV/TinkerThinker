name: ESP32 PlatformIO Build & Release

on:
  push:
    branches: [ main, develop, feature/** ]
    paths:
      - '**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11 (stable for PIO)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache PlatformIO core and packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
          key: pio-${{ runner.os }}-${{ hashFiles('platformio.ini', 'dependencies.lock') }}

      - name: Prepare PlatformIO directories
        run: |
          mkdir -p ~/.platformio/packages ~/.platformio/platforms ~/.platformio/cache || true

      - name: Install PlatformIO
        run: pip install --upgrade platformio

      - name: Show PlatformIO version
        run: pio --version

      - name: Show PlatformIO system info
        run: |
          pio system info || true
          pio settings get || true

      - name: Build firmware
        run: |
          # Build single-threaded to avoid occasional directory creation races
          pio run -e esp32dev -j 1

      - name: Build LittleFS image
        run: |
          pio run -e esp32dev -t buildfs -j 1

      - name: List output files
        run: ls -l .pio/build/esp32dev || true

      - name: Generate release body
        run: |
          python3 - <<'PY'
          import os, csv, json, hashlib
          ini = 'platformio.ini'
          pfile = None
          board = 'unknown'
          platform = 'unknown'
          flash_size = 'unknown'
          if os.path.isfile(ini):
              with open(ini,'r',encoding='utf-8') as f:
                  for line in f:
                      s=line.strip()
                      if s.startswith('board_build.partitions'):
                          pfile=s.split('=',1)[1].strip()
                      elif s.startswith('board ='):
                          board=s.split('=',1)[1].strip()
                      elif s.startswith('platform ='):
                          platform=s.split('=',1)[1].strip()
                      elif s.startswith('board_build.flash_size'):
                          flash_size=s.split('=',1)[1].strip()
          app_off = '0x20000'
          fs_off = 'unknown'
          fs_size = 'unknown'
          if pfile and os.path.isfile(pfile):
              with open(pfile,'r',encoding='utf-8') as f:
                  r=csv.reader(f)
                  for row in r:
                      if not row or row[0].strip().startswith('#'):
                          continue
                      name=row[0].strip().lower(); typ=row[1].strip().lower(); sub=row[2].strip().lower()
                      off=row[3].strip().lower(); size=row[4].strip().lower()
                      def tohex(s):
                          if s.startswith('0x'): return s
                          if s.endswith('m'): return hex(int(s[:-1])*1024*1024)
                          if s.endswith('k'): return hex(int(s[:-1])*1024)
                          return hex(int(s))
                      if typ=='app' and (name=='factory' or sub=='ota_0'):
                          app_off = tohex(off)
                      if typ=='data' and (sub=='spiffs' or sub=='littlefs'):
                          fs_off = tohex(off); fs_size = tohex(size)
          def sz(p):
              try:
                  return os.path.getsize(p)
              except: return 0
          bl='.pio/build/esp32dev/bootloader.bin'; pt='.pio/build/esp32dev/partitions.bin'; fw='.pio/build/esp32dev/firmware.bin'; fs='.pio/build/esp32dev/littlefs.bin'
          body = []
          body.append(f"Board: {board}")
          body.append(f"Platform: {platform}")
          body.append(f"Flash Size: {flash_size}")
          body.append(f"Partitions CSV: {pfile or 'unknown'}")
          body.append("")
          body.append("Offsets")
          body.append(f"- bootloader: 0x1000")
          body.append(f"- partitions: 0x8000")
          body.append(f"- app: {app_off}")
          body.append(f"- fs: {fs_off} (size {fs_size})")
          body.append("")
          body.append("Artifacts (size bytes)")
          body.append(f"- bootloader.bin: {sz(bl)}")
          body.append(f"- partitions.bin: {sz(pt)}")
          body.append(f"- firmware.bin: {sz(fw)}")
          body.append(f"- littlefs.bin: {sz(fs)}")
          with open('RELEASE_BODY.md','w',encoding='utf-8') as f:
              f.write('\n'.join(body))
          print('Generated RELEASE_BODY.md')
          PY

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: esp32dev-artifacts
          path: |
            .pio/build/esp32dev/bootloader.bin
            .pio/build/esp32dev/partitions.bin
            .pio/build/esp32dev/firmware.bin
            .pio/build/esp32dev/littlefs.bin
          if-no-files-found: warn

      - name: Compute release metadata (main branch)
        if: github.ref == 'refs/heads/main'
        id: relmeta
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          DATE=$(date -u +'%Y%m%d-%H%M')
          echo "tag=main-${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "name=Main Build ${DATE} (${SHORT_SHA})" >> $GITHUB_OUTPUT

      - name: Create GitHub Release (main branch)
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.relmeta.outputs.tag }}
          name: ${{ steps.relmeta.outputs.name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body_path: RELEASE_BODY.md
          files: |
            .pio/build/esp32dev/bootloader.bin
            .pio/build/esp32dev/partitions.bin
            .pio/build/esp32dev/firmware.bin
            .pio/build/esp32dev/littlefs.bin

      - name: Create GitHub Release and upload assets (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body_path: RELEASE_BODY.md
          files: |
            .pio/build/esp32dev/bootloader.bin
            .pio/build/esp32dev/partitions.bin
            .pio/build/esp32dev/firmware.bin
            .pio/build/esp32dev/littlefs.bin
